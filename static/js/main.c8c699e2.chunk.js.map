{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","react_default","a","createElement","className","Movie_MoviePoster","poster","this","props","title","genres","map","genre","index","Movie_MovieGenre","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","React","Component","MovieGenre","MoviePoster","src","alt","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","potato","json","data","catch","err","console","log","_renderMovies","movie","src_Movie_0","title_english","medium_cover_image","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAKMA,mLAUE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaC,OAAQC,KAAKC,MAAMF,OAAQG,MAAOF,KAAKC,MAAMC,SAG9DR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMC,OAChBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVG,KAAKC,MAAME,OAAOC,IAAI,SAACC,EAAOC,GAAR,OAAkBZ,EAAAC,EAAAC,cAACW,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAE5EZ,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIe,KAAMV,KAAKC,MAAMU,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,sBA3BhBC,IAAMC,WAoCpBC,mLAKE,OACIxB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBG,KAAKC,MAAMI,cAN9BW,IAAMC,WAiBzBE,mLAQE,OACIzB,EAAAC,EAAAC,cAAA,OAAKwB,IAAKpB,KAAKC,MAAMF,OAAQsB,IAAKrB,KAAKC,MAAMC,MAAOA,MAAOF,KAAKC,MAAMC,MAAOL,UAAU,yBATzEmB,IAAMC,WAcjBxB,ICcA6B,6MA7EbC,MAAQ,KAuCRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAhC,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CACZT,WAHS,wBAAAG,EAAAO,SAAAX,EAAAzB,WAObiC,SAAW,WACT,OAAOI,MAAM,iEACVC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GACJ,OAAOA,EAAKC,KAAKf,SAElBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG9BG,cAAgB,WAUd,OATad,EAAKT,MAAMG,OAAOtB,IAAI,SAAC2C,GAClC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,CACL9C,MAAO6C,EAAME,cACblD,OAAQgD,EAAMG,mBACd1C,IAAKuC,EAAMI,GACXhD,OAAQ4C,EAAM5C,OACdQ,SAAUoC,EAAMpC,kGAzDpBiC,QAAQC,IAAI,kEAIZD,QAAQC,IAAI,qBAGZ7C,KAAKwB,8CAyDL,OADAoB,QAAQC,IAAI,UAEVnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZG,KAAKuB,MAAMG,OAAS1B,KAAK8C,gBAAkB,qBA5ElC7B,aCQEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.c8c699e2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Movie.css'\r\nimport propTypes from 'prop-types'\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nclass Movie extends React.Component {\r\n\r\n    static propTypes = {\r\n        title: propTypes.string.isRequired,\r\n        poster: propTypes.string.isRequired,\r\n        genres: propTypes.array.isRequired,\r\n        synopsis: propTypes.string.isRequired,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__columns\">\r\n                    <MoviePoster poster={this.props.poster} title={this.props.title} />\r\n                </div>\r\n\r\n                <div className=\"Movie__columns\">\r\n                    <h1>{this.props.title}</h1>\r\n                    <div className=\"Movie__Genres\">\r\n                        {this.props.genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                    </div>\r\n                    <p>\r\n                        <LinesEllipsis\r\n                            text={this.props.synopsis}\r\n                            maxLine='3'\r\n                            ellipsis='...'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                        />\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MovieGenre extends React.Component {\r\n    static propTypes = {\r\n        genre: propTypes.string.isRequired,\r\n    }\r\n    render() {\r\n        return (\r\n            <span className=\"Movie__Genre\">{this.props.genre}</span>\r\n        )\r\n    }\r\n}\r\n\r\n// class 안에 static으로 해주는 것과 동일!\r\n// Movie.propTypes = {\r\n//     title: propTypes.string,\r\n//     poster: propTypes.string,\r\n// }\r\n\r\nclass MoviePoster extends React.Component {\r\n\r\n    static propTypes = {\r\n        poster: propTypes.string.isRequired,\r\n        title: propTypes.string.isRequired,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img src={this.props.poster} alt={this.props.title} title={this.props.title} className=\"Movie__Poster\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\nclass App extends Component {\n\n  // Render: componentWillMount() -> render() ->  componentDidMount()\n  // Update: componentWillRecieveProps() -> shouldComponentUpdate() === true -> componentWillUpdate() -> render() -> componentDidUpdate() \n\n  state = {\n\n  }\n  //http://webframeworks.kr/tutorials/translate/es6-promise-api-1/\n  componentWillMount() {\n    console.log('componentWillMount')\n    // api 작업 요청!\n  }\n  componentDidMount() {\n    console.log('componentDidMount')\n\n\n    this._getMovies()\n\n\n\n\n\n\n    // setTimeout(() => {\n    //   this.setState({\n    //     movies: [\n    //       {\n    //         title: '매트릭스',\n    //         poster: 'http://2korea.hani.co.kr/files/attach/images/64/981/316/001.jpg',\n    //       },\n    //       {\n    //         title: '악마를 보았다',\n    //         poster: 'https://t1.daumcdn.net/cfile/tistory/1707070D4C7271CCA9',\n    //       },\n    //       {\n    //         title: '집으로',\n    //         poster: 'https://upload.wikimedia.org/wikipedia/ko/thumb/c/ce/%EC%A7%91%EC%9C%BC%EB%A1%9C_%ED%8F%AC%EC%8A%A4%ED%84%B0.jpg/250px-%EC%A7%91%EC%9C%BC%EB%A1%9C_%ED%8F%AC%EC%8A%A4%ED%84%B0.jpg',\n    //       }\n    //     ]\n    //   })\n    // }, 3000)\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies,\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n      .then(potato => potato.json())\n      .then(json => {\n        return json.data.movies\n      })\n      .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    let movies = this.state.movies.map((movie) => {\n      return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        />\n    })\n    return movies\n  }\n  render() {\n    console.log('render')\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}